cabal-version: 3.0

-- This Cabal file has been automatically generated from a .cabal.in template
-- file using Precabal and the `autogen` script from the project's root
-- directory. Do not edit this file.

name: funhack
version: 0.1.0.0
synopsis: A fun roguelike game written in a functional language
description:
    Funhack is a fun programming experimentation – a roguelike game written in Haskell.
    .
    It is a toy program. The game is not (and will not) be playable. As said, it is an experimentation for personal testing.
homepage: https://github.com/Merivuokko/funhack
license: GPL-3.0-only
license-file: LICENSE
author: Aura Kelloniemi
maintainer: kaura.dev@sange.fi
copyright: Copyright 2023–2024 Aura Kelloniemi
tested-with: GHC == { 9.6.2, 9.8.1, 9.10.1 }
extra-doc-files:
    AUTHORS.md
    LICENSE
    README.md

source-repository head
    type: git
    location: https://github.com/Merivuokko/funhack
                      
flag Werror
    description: Enable -Werror for fixing all warnings
    default: False
    manual: True

flag Weverything
    description: Enable almost every possible warning
    default: False
    manual: True

common options
    default-extensions:
        ApplicativeDo,
        BlockArguments,
        DataKinds,
        DeriveAnyClass,
        DeriveGeneric,
        DerivingStrategies,
        DuplicateRecordFields,
        LambdaCase,
        MultiWayIf,
        NoFieldSelectors,
        NoStarIsType,
        OverloadedRecordDot,
        OverloadedStrings,
        QuasiQuotes,
        RecordWildCards,
        StrictData,
        TypeFamilies
    default-language: GHC2021
    ghc-options:
        -fwrite-ide-info

    if flag(Werror)
        ghc-options: -Werror

    if flag(Weverything)
        ghc-options:
            -fshow-warning-groups
            -Weverything
            -Wno-all-missed-specialisations
            -Wno-implicit-prelude
            -Wno-missed-specialisations
            -Wno-missing-import-lists
            -Wno-missing-kind-signatures
            -Wno-missing-safe-haskell-mode
            -Wno-monomorphism-restriction
            -Wno-safe
            -Wno-unsafe
            -Wno-unticked-promoted-constructors
    else
        ghc-options: -Wall -Wcompat

library
    import: options
    build-depends:
        base ^>= { 4.18, 4.19, 4.20 },
        effectful-core ^>={ 2.2.2, 2.3 },
        hashable >=1.4.1 && <1.6,
        pqueue ^>=1.5.0,
        random ^>= 1.2.1.1,
        text >=2.0 && <2.2,
        unordered-containers ^>= 0.2.19.1,
        vector ^>=0.13,
    exposed-modules:
        FunHack.DungeonGenerator,
        FunHack.Geometry,
        FunHack.PathFinding,
        FunHack.Random,
        FunHack.WorldMap
    other-modules:
    hs-source-dirs: lib

executable funhack
    import: options
    build-depends:
        funhack,
        base ^>= { 4.18, 4.19, 4.20 },
        effectful-core ^>={ 2.2.2, 2.3 },
        text >=2.0 && <2.2,
    hs-source-dirs: src
    main-is: Main.hs

test-suite funhack-test
    import: options
    build-depends:
        funhack,
        base ^>= { 4.18, 4.19, 4.20 },
    type: exitcode-stdio-1.0
    hs-source-dirs: test
    main-is: Main.hs
                           
